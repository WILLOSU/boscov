generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// 🔄 Substituímos o antigo model 'User' por 'Usuario'
//    e adicionamos novos campos conforme o modelo lógico atualizado.
//

model Usuario {
  id                Int           @id @default(autoincrement())
  nome              String
  senha             String
  email             String        @unique
  status            Boolean       @default(true)
  apelido           String?
  dataNascimento    DateTime
  dataCriacao       DateTime      @default(now())
  dataAtualizacao   DateTime      @updatedAt

  tipoUsuarioId     Int           // 🔗 Chave estrangeira para TipoUsuario
  tipoUsuario       TipoUsuario   @relation(fields: [tipoUsuarioId], references: [id])

  // 🔗 Relacionamento com as Avaliações feitas pelo usuário (1:N)
  avaliacoes        Avaliacao[]
}

//
// ✅ Modelo para representar os tipos de usuários (ex: Admin, Comum, etc.)
//
model TipoUsuario {
  id        Int       @id @default(autoincrement())
  nome      String
  usuarios  Usuario[] // 🔗 Um tipo pode estar associado a vários usuários
}

//
// ✅ Modelo Filme conforme especificado no diagrama
//
model Filme {
  id               Int            @id @default(autoincrement())
  nome             String
  diretor          String
  anoLancamento    Int
  duracao          Int
  produtora        String
  classificacao    String
  poster           String?

  // 🔗 Um filme pode ter várias avaliações
  avaliacoes       Avaliacao[]

  // 🔗 Relacionamento N:N com Genero (via Genero_Filme)
  generos          Genero_Filme[]
}

//
// ✅ Modelo Genero conforme especificado
//
model Genero {
  id         Int             @id @default(autoincrement())
  descricao  String

  // 🔗 Relacionamento com Genero_Filme (N:N)
  generosFilmes Genero_Filme[]
}

//
// ✅ Modelo intermediário para representar o N:N entre Filme e Genero
//
model Genero_Filme {
  idGenero   Int
  idFilme    Int

  // 🔗 Relacionamentos com as tabelas pai
  genero     Genero @relation(fields: [idGenero], references: [id])
  filme      Filme  @relation(fields: [idFilme], references: [id])

  // 🔐 Chave composta para evitar duplicidade
  @@id([idGenero, idFilme])
}

//
// ✅ Modelo Avaliacao, ligado a Usuario e Filme (N:1 dos dois lados)
//
model Avaliacao {
  id         Int      @id @default(autoincrement())
  idUsuario  Int
  idFilme    Int
  nota       Int
  comentario String?

  // 🔗 Relações com Usuario e Filme
  usuario    Usuario @relation(fields: [idUsuario], references: [id])
  filme      Filme   @relation(fields: [idFilme], references: [id])
}
